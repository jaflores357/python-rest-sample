# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MachineInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, instance_id: str=None, instance_type: str=None, launch_date: str=None):  # noqa: E501
        """MachineInfo - a model defined in Swagger

        :param instance_id: The instance_id of this MachineInfo.  # noqa: E501
        :type instance_id: str
        :param instance_type: The instance_type of this MachineInfo.  # noqa: E501
        :type instance_type: str
        :param launch_date: The launch_date of this MachineInfo.  # noqa: E501
        :type launch_date: str
        """
        self.swagger_types = {
            'instance_id': str,
            'instance_type': str,
            'launch_date': str
        }

        self.attribute_map = {
            'instance_id': 'instanceId',
            'instance_type': 'instanceType',
            'launch_date': 'launchDate'
        }

        self._instance_id = instance_id
        self._instance_type = instance_type
        self._launch_date = launch_date

    @classmethod
    def from_dict(cls, dikt) -> 'MachineInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MachineInfo of this MachineInfo.  # noqa: E501
        :rtype: MachineInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_id(self) -> str:
        """Gets the instance_id of this MachineInfo.


        :return: The instance_id of this MachineInfo.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id: str):
        """Sets the instance_id of this MachineInfo.


        :param instance_id: The instance_id of this MachineInfo.
        :type instance_id: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")  # noqa: E501

        self._instance_id = instance_id

    @property
    def instance_type(self) -> str:
        """Gets the instance_type of this MachineInfo.


        :return: The instance_type of this MachineInfo.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type: str):
        """Sets the instance_type of this MachineInfo.


        :param instance_type: The instance_type of this MachineInfo.
        :type instance_type: str
        """
        if instance_type is None:
            raise ValueError("Invalid value for `instance_type`, must not be `None`")  # noqa: E501

        self._instance_type = instance_type

    @property
    def launch_date(self) -> str:
        """Gets the launch_date of this MachineInfo.


        :return: The launch_date of this MachineInfo.
        :rtype: str
        """
        return self._launch_date

    @launch_date.setter
    def launch_date(self, launch_date: str):
        """Sets the launch_date of this MachineInfo.


        :param launch_date: The launch_date of this MachineInfo.
        :type launch_date: str
        """
        if launch_date is None:
            raise ValueError("Invalid value for `launch_date`, must not be `None`")  # noqa: E501

        self._launch_date = launch_date
